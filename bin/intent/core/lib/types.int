
domain Types {
  trait Equal = (other: Any) => this === other;
  trait Not = (value: Any) => !value;
  trait Null = Equal(null);

  native domain Number {{
      value: number;

      parse(string: String, radix: Number): Number;
    }

    native domain Random extends Number {{
      inRange(min: Number, max: Number): self;
    }}

    to String;
    to Boolean;
  }

  native domain Boolean {{
      value: boolean;
    }

    to Number;
  }

  native domain String {{
      value: string;
    }

    get length: Number;

    to Boolean;
  }

  native domain Callable<I, O> {
    (...arguments: I): O;
  }

  native domain Maybe<E> {
    trait Valid = () => Not(Null);

    domain Value<E> {
      is Valid;
    }
  }

  native domain Type<T> {{
      type: T;

      cast(value: Any): Maybe<T>;
    }

    to String;
  }

  domain Streamed {
    domain Consumer<I, O> extends Callable<[I, self], O> {
    }

    domain Matcher<I> extends Consumer<[I, self], Boolean> {
    }
  }

  domain Math {
    trait Equal = (other: Number) => this.value === other.value;
    trait LessThan = (max: Number) => this.value < max;
    trait GreaterThan = (min: Number) => this.value > min;
    trait LessThanOrEqual = (max: Number) => (this.value < max) || Equal(max);
    trait GreaterThanOrEqual = (min: Number) => (this.value > min) || Equal(min);
    trait InRange = (min: Number, max: Number) => GreaterThanOrEqual(min) && LessThanOrEqual(max);

    domain NaturalNumber extends Number {
      is GreaterThanOrEqual(0);
    }

    domain PositiveNumber extends Number {
      is GreaterThan(0);
    }

    domain NegativeNumber extends Number {
      is LessThan(0);
    }
  }

  domain Collections {
    trait Sized () => this['size'];
    trait IsEmpty = () => Sized() && !size; // would cause reconciliation error on non-sized domains

    domain Index extends Number {
      domain Valid extends Index {
        is GreaterThanOrEqual(0);
      }

      domain Invalid extends Index {
        is LessThan(0);
      }
    }

    native domain Array<E> {
      get length: Number;
      get [index: Index.Valid]: Maybe<E>;
      set [index: Index.Valid, element: E]: same element;

      indexOf(element: E): Index;

      push(element: E): Math.NaturalNumber;
      pop(): Maybe<E>;

      map<T>(mapper: Consumer<E, T>): Array<T>;
      filter(predicate: Matcher<E>): Array<E>;
      each(consumer: Matcher<E>): Math.NaturalNumber;
    }

    domain Collection<E> extends E[] {
      get size: Number {
        return length;
      }

      get [index: Index.Valid]: E {
        return value[index];
      }

      add(element: E): Number {
        return push(element);
      }

      has(element: E): Boolean {
        return indexOf(element) >= 0;
      }

      remove(element: E): Number {
        if ((let index = indexOf(element)) >= 0) {
          splice(index, 1);
        }

        return size;
      }
    }

    domain Set<E> extends Collection<E> {
      add(element: E): Number {
        return has(element)
          ? size
          : value.push(element)
        ;
      }
    }

    domain Map<K, V> extends Set<[K, V]> {{
        keys: Set<K> = Set(value.map(entry => entry[0]));
        values: Collection<V> = Collection(value.map(entry => entry[1]));
      }

      get entries: Set<[K, V]> {
        return value;
      }

      get keys: Set<K> {
        return keys;
      }

      get values: Collection<V> {
        return values;
      }

      get size: Number {
        return value.size;
      }
    }
  }

  domain Sure {
    trait NotEmpty = () => Not(Empty);

    domain Collection extends Collections.Collection {
      is NotEmpty;
    }

    domain String extends Strings.String {
      is NotEmpty;
    }
  }

  domain IO {{
    question(query: String): String;
    print(text: String): Number;
  }}
}
