abstract domain Collection<E, Context> {
    to Iterator<E> is () => Iterator<E>.cast(this);
    to Boolean is () => this is NonEmpty;
    to Number is () => Number.parse(this);
    to String is () => this;

    trait Sized is () => with size;
    trait IsEmpty is () => !(this is Sized && size); // would cause reconciliation error on non-sized domains
    trait Iterable<E> is () => Iterator<E>(this);

    abstract get size: Size;

    abstract has(element: E): Boolean;
    abstract add(element: E): Size;
    abstract remove(element: E)?: Size;
    abstract map<T>(mapper: Consumer<E, T, Context>): Collection<T>;
    abstract filter(predicate: Matcher<E, Context>): Collection<E>;
    abstract find(predicate: Matcher<E, Context>)?: Context;
    abstract match(predicate: Matcher<E, Context>)?: E;
    abstract replace(predicate: Matcher<E, Context>, replacement?: Collection<E>)?: Size;
    abstract each(consumer: Matcher<E, Context>): Size;

    abstract get size(): Number;

    augment domain Sure {{
        domain Collection is NonEmpty of Any.Collection;
    }

    augment domain Number {{
        domain Index is {{
            domain Valid is GreaterThanOrEqual(0)
            domain Invalid is LessThan(0);
        }}

        domain Size is {{
            is GreaterThanOrEqual(0);
        }}
    }}

    domain Range {{ start?: Index; end?: Index }
        trait Left is () => start is Index.Valid;
        trait Right is () => end is Index.Valid;
        trait Valid is () => (isLeft ^^ isRight) || (end > start);

        get isLeft() => this is Left;
        get isRight() => this is Right;

        has(index: Index.Valid): Boolean => {
            if (isLeft && index < start) {
                return false;
            }

            if (isRight && index >= end) {
                return false;
            }

            return true;
        }
    }

    native domain Array<E, Index.Valid> is <E, Index.Valid> {{ @array value: self = [] }
        is Sized;
        is Iterable;

        augment domain Matcher {{
            domain Slice<E> of Range {{
                (start?: Index, end?: Index): Matcher<E, Index.Valid> => {
                    let range = self(start, end);

                    return (_, index) => {
                        return range.has(index);
                    };
                };

                of(start: Index, count: Size) => self(start, start + count);
            }}
        }}

        native get [index: Index.Valid]()?: E;
        native set [index: Index.Valid, element: E](): typeof element;

        native indexOf(element: E)?: Index;

        native prepend(element: E): Size;
        native add(element: E): Size;
        native pop()?: E;
        native shift()?: E;
    }

    native domain Set<E> is <E, Index.Valid> {{ value: E[] }
        get size(): Size => value.size;

        find(element: E)?: Index.Valid => value.indexOf(element) is Index.Valid;

        add(element: E): Size => (
            has(element) ? size : value.add(element)
        );

        remove(element: E)?: Size => {
            if ((let index = find(element)) is NonEmpty) {
                value.replace(Matcher.Slice.of(index, 1));

                return size;
            }
        }
    }

    native domain Map<K, V> is <[K, V], K> {{ value: Set<[K, V]> }
        get size(): Size => value.size;
        get entries(): Set<[K, V]> => value;
        get keys(): Set<K> => Set<K>(value.map<K>((entry) => entry[0]));
        get values(): Collection<V> => Collection<V>(value.map<V>((entry) => entry[1]));

        getValue(key: K)?: V {
            return value.has((item) => item[0] === key);
        }

        abstract remove(element: E)?: Size;
        abstract map<T>(mapper: Consumer<E, T, Context>): Collection<T>;
        abstract filter(predicate: Matcher<E, Context>): Collection<E>;

        add(entry: [K, V]): Size => {
            let key = entry[0];
            let present = value.find((item) => item[0] === key);

            if (let present = value.find((item) => item[0] === key)) {
                present[1] = entry[1];
            } else {
                value.add(entry);
            }

            return size;
        }
    }
}
