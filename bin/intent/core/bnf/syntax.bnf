
// module

module
  ::= use* domain*


// use

use
  ::= 'use' useClause ';'

useClause
  ::= useQualifier (':' decomposition)

useQualifier
  ::= qualifier ('as' identifier)?

qualifier
  ::= identifier ('.' identifier)*

decomposition
  ::= '{' (useClause (',' useClause)* ','?)? '}'


// scope

modifier
  ::= 'public' | 'private' | 'protected'


// domain

domain
  ::= modifier? 'domain' identifier '{' interface? domain* properties? method* '}'

interface
  ::= 'interface'? '{' typeMembers '}'


// interfaces

typeMembers
  ::= (typeMember ';')*

typeMember
  ::= identifier ':' type

type
  ::= qualifier generic? isArray?

isArray
  ::= '[' ']'

generic
  ::= '<' type (',' type)* '>'


// objects

properties
  ::= (property ';')+

property
  ::= identifier (':' type)? initializer?


// method

method
  ::= modifier? getterSetter? identifier (indexedAccess | parameters) returnType block

getterSetter
  ::= 'get' | 'set'

indexedAccess
  ::= '[' typeMembers ']'

parameters
  ::= '(' typeMembers ')'

returnType
  ::= ':' type

block
  ::= '{' statement* '}'


// statements

statement
  ::= assignment | expression

assignment
  ::= var identifier initializer

var
  ::= 'const' | 'let'

initializer
  ::= '=' expression

expression
  ::= comparision (chain | indexed | call)*

chain
  ::= '.' identifier

indexed
  ::= '[' expression ']'

call
  ::= '(' (expression (',' expression)* ','?)? ')'

comparision
  ::= boolean (('>' | '<' | '>=' | '<=' | '!=' | '==') expression)*

boolean
  ::= additive (('&' | '|' | '^') expression)*

additive
  ::= multiplicative (('+' | '-') expression)*

multiplicative
  ::= accessor (('*' | '/' | '%' | '**') expression)*

accessor
  ::= ('(' expression ')') | literal | object | identifier

literal
  ::= string | number

object
  ::= '{' properties  '}'
