
// module
module
  ::= use* domain

qualifier
  ::= identifier ('.' qualifier)?

use
  ::= 'use' qualifier (use_decomposition | use_alias) ';'

use_alias
  ::= 'as' identifier

use_decomposition
  ::= ':' '{' (use_decomposition_item ',')+ '}'

use_decomposition_item
  ::= qualifier use_decomposition?

// domain
domain
  ::= 'domain' identifier generic_definition? ('extends' domain_reference)? '{' domain_body '}'

domain_body
  ::= constructor? use? domain_clause* domain_method* constructor?

domain_clause
  ::= domain | enum

domain_method
  ::= identifier functor

enum
  ::= 'enum' identifier? ('extends' domain_reference) '{' (enum_clause (',' enum_clause)*)? '}'

enum_clause
  ::= (enum_inheritor | identifier) '=' expression

enum_inheritor
  ::= ':' qualifier

constructor
  ::= '{' (constructor_property (',' constructor_property)* ','?)? '}'

constructor_property
  ::= identifier (':' domain_reference ('=' expression)) | ('=' expression)

constructor
  ::= domain_method

// domain lookup
domain_reference
  ::= qualifier domain_reference_generic? ('[' ']')?

domain_reference_generic
  ::= '<' domain_reference (',' domain_reference)* '>'

// generic definitions
generic_definition
  ::= '<' identifier (',' identifier)* '>'

// functor
functor
  ::= '(' functor_args? ')' (':' domain_reference)? '=>' functor_body

functor_args
  ::= functor_arg (',' functor_arg)*

functor_body
  ::= block | expression

functor_arg
  ::= identifier ':' domain_reference ('=' expression)?

// expressions
expression
  ::= comparision (chain | indexed | call | is)*

chain
  ::= '.' identifier

indexed
  ::= '[' expression ']'

call
  ::= '(' call_args? ')'

call_args
  ::= call_arg (',' call_arg)* ','?

call_arg
  ::= (identifier ':')? expression

is
  ::= 'is' domain_reference

comparision
  ::= boolean (('>' | '<' | '>=' | '<=' | '!=' | '==') expression)*

boolean
  ::= arithmetic1 (('&' | '|' | '^') expression)*

arithmetic1
  ::= arithmetic2 (('+' | '-') expression)*

arithmetic2
  ::= accessor (('*' | '/' | '%' | '**') expression)*

accessor
  ::= callable | ('(' expression ')') | object | array | literal | identifier

callable
  ::= functor

object
  ::= '{' (object_entry ',')* '}'

object_entry
  ::= identifier ':' expression

array
  ::= '[' (expression (',' expression)* ','? ']'

object_entry
  ::= identifier ':' expression

literal
  ::= string | number

// functor body
block
  ::= '{' (decorated_block_item | block_item)* '}'

decorated_block_item
  ::= '@' expression block_item

block_item
  ::= if | loop | ((break | return | statement) ';')

statement
  ::= assignment | expression

assignment
  ::= assignment_target '=' expression

assignment_target
  ::= 'let' identifier

loop
  ::= 'each' loop_iterator block

if
  ::= 'if' statement block ('else' block)?

break
  ::= 'break' | 'continue'

return
  ::= 'return' expression

loop_iterator
  ::= assignment_target 'of' expression
